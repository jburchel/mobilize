"""Add is_primary_contact to Person and remove primary contact fields from Church

Revision ID: 4cb401521a9e
Revises: 00a6f3565d53
Create Date: 2025-03-24 08:54:25.804568

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision = '4cb401521a9e'
down_revision = '00a6f3565d53'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Note: is_primary_contact column already exists in people table
    
    with op.batch_alter_table('sync_history', schema=None) as batch_op:
        # Alter column nullability if it exists
        if column_exists('sync_history', 'status'):
             batch_op.alter_column('status',
                   existing_type=sa.VARCHAR(length=20),
                   nullable=True)
        # Drop columns only if they exist
        if column_exists('sync_history', 'action'):
            batch_op.drop_column('action')
        if column_exists('sync_history', 'details'):
            batch_op.drop_column('details')
        if column_exists('sync_history', 'next_sync_token'):
            batch_op.drop_column('next_sync_token')
        if column_exists('sync_history', 'updated_at'):
            batch_op.drop_column('updated_at')
        if column_exists('sync_history', 'started_at'):
            batch_op.drop_column('started_at')
    
    # Handle tasks table FK (conditionally for SQLite)
    bind = op.get_bind()
    is_sqlite = bind.dialect.name == 'sqlite'
    if not is_sqlite:
        with op.batch_alter_table('tasks', schema=None) as batch_op:
             # Check if created_by column exists before adding FK
             if column_exists('tasks', 'created_by'):
                 # Ensure constraint name is unique if recreating
                 try:
                     batch_op.create_foreign_key('fk_tasks_created_by_users', 'users', ['created_by'], ['id'])
                 except Exception as e:
                     print(f"Could not create FK fk_tasks_created_by_users: {e}") # Might already exist
    
    with op.batch_alter_table('users', schema=None) as batch_op:
        # Alter column nullability if it exists
        if column_exists('users', 'office_id'):
            batch_op.alter_column('office_id',
                   existing_type=sa.INTEGER(),
                   nullable=True)
    # ### end Alembic commands ###


def downgrade():
    bind = op.get_bind()
    is_sqlite = bind.dialect.name == 'sqlite'
    
    with op.batch_alter_table('users', schema=None) as batch_op:
        if column_exists('users', 'office_id'):
            batch_op.alter_column('office_id',
                   existing_type=sa.INTEGER(),
                   nullable=False)
    
    # Handle tasks table FK (conditionally for SQLite)
    if not is_sqlite:
        with op.batch_alter_table('tasks', schema=None) as batch_op:
             try:
                 batch_op.drop_constraint('fk_tasks_created_by_users', type_='foreignkey')
             except Exception as e:
                 print(f"Could not drop FK constraint fk_tasks_created_by_users: {e}")
    
    with op.batch_alter_table('sync_history', schema=None) as batch_op:
        # Add columns back only if they don't exist
        if not column_exists('sync_history', 'started_at'):
            batch_op.add_column(sa.Column('started_at', sa.DATETIME(), nullable=True)) # Make nullable on downgrade for safety
        if not column_exists('sync_history', 'updated_at'):
            batch_op.add_column(sa.Column('updated_at', sa.DATETIME(), nullable=True))
        if not column_exists('sync_history', 'next_sync_token'):
            batch_op.add_column(sa.Column('next_sync_token', sa.VARCHAR(length=255), nullable=True))
        if not column_exists('sync_history', 'details'):
             # Use Text for downgrade if JSON causes issues, or keep JSON if compatible
            batch_op.add_column(sa.Column('details', sa.Text(), nullable=True))
        if not column_exists('sync_history', 'action'):
            batch_op.add_column(sa.Column('action', sa.VARCHAR(length=50), nullable=True)) # Make nullable on downgrade
        
        # Alter status column back if it exists
        if column_exists('sync_history', 'status'):
            batch_op.alter_column('status',
                   existing_type=sa.VARCHAR(length=20),
                   nullable=False)
    
    # Note: is_primary_contact column already existed before this migration
    # ### end Alembic commands ###

# Helper function to check if column exists
def column_exists(table_name, column_name):
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    columns = [c['name'] for c in inspector.get_columns(table_name)]
    return column_name in columns
