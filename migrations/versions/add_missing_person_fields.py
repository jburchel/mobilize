"""Add missing fields to people table

Revision ID: add_missing_person_fields
Revises: 54265a913aab
Create Date: 2025-04-16 16:02:00.000000

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'add_missing_person_fields'
down_revision = '54265a913aab'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        # Using batch operations for SQLite compatibility
        with op.batch_alter_table('people', schema=None) as batch_op:
            columns_to_add = {
                'birthday': sa.Column(sa.Date(), nullable=True),
                'anniversary': sa.Column(sa.Date(), nullable=True),
                'occupation': sa.Column(sa.String(length=100), nullable=True),
                'employer': sa.Column(sa.String(length=100), nullable=True),
                'interests': sa.Column(sa.Text(), nullable=True),
                'skills': sa.Column(sa.Text(), nullable=True),
                'languages': sa.Column(sa.Text(), nullable=True),
                'facebook': sa.Column(sa.String(length=100), nullable=True),
                'twitter': sa.Column(sa.String(length=100), nullable=True),
                'linkedin': sa.Column(sa.String(length=100), nullable=True),
                'instagram': sa.Column(sa.String(length=100), nullable=True),
                'website': sa.Column(sa.String(length=200), nullable=True),
                'last_contact': sa.Column(sa.DateTime(), nullable=True),
                'next_contact': sa.Column(sa.DateTime(), nullable=True),
                'status': sa.Column(sa.String(length=50), server_default='active', nullable=True),
                'pipeline_status': sa.Column(sa.String(length=50), nullable=True),
                'pipeline_stage': sa.Column(sa.String(length=50), nullable=True),
                'priority': sa.Column(sa.String(length=50), server_default='MEDIUM', nullable=True),
                'assigned_to': sa.Column(sa.String(length=50), server_default='UNASSIGNED', nullable=True),
                'source': sa.Column(sa.String(length=50), server_default='UNKNOWN', nullable=True),
                'reason_closed': sa.Column(sa.Text(), nullable=True),
                'date_closed': sa.Column(sa.Date(), nullable=True),
                'tags': sa.Column(sa.Text(), nullable=True)
            }
            for col_name, col_def in columns_to_add.items():
                 if not column_exists('people', col_name):
                     batch_op.add_column(col_def)

        print("Successfully added new fields to people table (if they didn't exist)")
    except Exception as e:
        print(f"Error adding columns to people table: {e}")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    columns_to_drop = [
        'tags', 'date_closed', 'reason_closed', 'source', 'assigned_to', 'priority',
        'pipeline_stage', 'pipeline_status', 'status', 'next_contact', 'last_contact',
        'website', 'instagram', 'linkedin', 'twitter', 'facebook', 'languages',
        'skills', 'interests', 'employer', 'occupation', 'anniversary', 'birthday'
    ]
    try:
        with op.batch_alter_table('people', schema=None) as batch_op:
            for col_name in columns_to_drop:
                if column_exists('people', col_name):
                    batch_op.drop_column(col_name)
        print("Successfully removed fields from people table (if they existed)")
    except Exception as e:
        print(f"Error removing columns from people table: {e}")
    # ### end Alembic commands ###

# Helper function to check if column exists
def column_exists(table_name, column_name):
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    columns = [c['name'] for c in inspector.get_columns(table_name)]
    return column_name in columns 