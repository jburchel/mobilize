"""Add additional Person fields from old model

Revision ID: a85c9265937c
Revises: 5be09d8bc98a
Create Date: 2025-03-21 15:44:42.237743

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision = 'a85c9265937c'
down_revision = '5be09d8bc98a'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        # Using batch operations for SQLite compatibility
        with op.batch_alter_table('people') as batch_op:
            batch_op.add_column(sa.Column('virtuous', sa.Boolean(), nullable=True))
            batch_op.add_column(sa.Column('title', sa.String(length=100), nullable=True))
            batch_op.add_column(sa.Column('marital_status', sa.String(length=100), nullable=True))
            batch_op.add_column(sa.Column('referred_by', sa.String(length=100), nullable=True))
            batch_op.add_column(sa.Column('info_given', sa.Text(), nullable=True))
            batch_op.add_column(sa.Column('desired_service', sa.Text(), nullable=True))
            batch_op.add_column(sa.Column('people_pipeline', sa.String(length=100), nullable=True))
        print("Successfully added new fields to people table")
    except Exception as e:
        print(f"Error adding columns to people table: {e}")
    
    # Skip other changes that could cause issues
    # op.alter_column('sync_history', 'status', existing_type=sa.VARCHAR(length=20), nullable=True)
    # op.drop_column('sync_history', 'started_at')
    # op.drop_column('sync_history', 'action')
    # op.drop_column('sync_history', 'next_sync_token')
    # op.drop_column('sync_history', 'details')
    # op.drop_column('sync_history', 'updated_at')
    # op.create_foreign_key(None, 'tasks', 'users', ['created_by'], ['id'])
    # op.alter_column('users', 'office_id', existing_type=sa.INTEGER(), nullable=True)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        # Using batch operations for SQLite compatibility
        with op.batch_alter_table('people') as batch_op:
            batch_op.drop_column('people_pipeline')
            batch_op.drop_column('desired_service')
            batch_op.drop_column('info_given')
            batch_op.drop_column('referred_by')
            batch_op.drop_column('marital_status')
            batch_op.drop_column('title')
            batch_op.drop_column('virtuous')
        print("Successfully removed fields from people table")
    except Exception as e:
        print(f"Error removing columns from people table: {e}")
    
    # Skip other changes
    # op.alter_column('users', 'office_id', existing_type=sa.INTEGER(), nullable=False)
    # op.drop_constraint(None, 'tasks', type_='foreignkey')
    # op.add_column('sync_history', sa.Column('updated_at', sa.DATETIME(), nullable=True))
    # op.add_column('sync_history', sa.Column('details', sqlite.JSON(), nullable=True))
    # op.add_column('sync_history', sa.Column('next_sync_token', sa.VARCHAR(length=255), nullable=True))
    # op.add_column('sync_history', sa.Column('action', sa.VARCHAR(length=50), nullable=False))
    # op.add_column('sync_history', sa.Column('started_at', sa.DATETIME(), nullable=False))
    # op.alter_column('sync_history', 'status', existing_type=sa.VARCHAR(length=20), nullable=False)
    # ### end Alembic commands ###
